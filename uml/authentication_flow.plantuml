@startuml "authentication_flow"
database "NCBI Clearinghouse" as Clearinghouse
database "FHIR auth db" as FhirDb
participant "FHIR" as Fhir
entity "Client app" as App
actor user as User
participant "RAS auth" as Ras

note left of User
An SPA will need to use
a service like Okta or
Auth0 to guard a client
secret that it can share
with RAS

This flow is not compatible
with SMART because RAS
does not understand FHIR
scopes. If we can make it
understand them then the
only disconnect will
be fetching the passport
on the client app.
end note

User -> App : Enter base URL
... User optionally interacts with public parts of API ...
User -> App : Click Login to FHIR Server

note left of User
Even when not mentioned,
the receiver of any message
validates its contents
before trusting it and taking
action based on it
end note

App -> User : Redirect browser to RAS ""/authorize""\nmust request ""openid"" scope
User -> Ras : Perform login (if needed)
Ras -> User: Ask for consent for SMART App to have access?
User -> Ras : Give consent
Ras -> User : Redirect browser to ""APP_REDIRECT_URL"" with code
User -> App : ""GET APP_REDIRECT_URL""
App -> Ras : ""POST"" to ""/token"" endpoint
Ras -> User : Redirect browser to APP_TOKEN_REDIRECT_URI
User -> App: Request APP_TOKEN_REDIRECT_URI
App -> App : Detect that these are RAS endpoints
App -> Ras : Request passport from /userinfo
Ras -> App : Passport
note left of App
Initially, this will be a full passport.
This can easily be too big to fit in
HTTPS Authorization header fields if the
user can see too many studies.

Eventually, an update to the GA4GH standard
should allow RAS to use a smaller passport.
end note
App -> User: Error if passport is too big
App -> User: Ready
... User may do things on public side of API ...
User -> App: Do something requiring controlled data
App -> Fhir: Make request with passport or error to user if\nrequest is not representable due to passport size
Fhir -> Clearinghouse: Process passport
Clearinghouse -> Fhir: User permissions and identity
Fhir -> App: FHIR Resources the user has permission to see
App -> User: Display data

@enduml
