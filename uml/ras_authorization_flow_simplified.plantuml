@startuml "ras_authorization_flow_simplified"
''''''''''''''''''
'This is a simplified version of ras_authorization_flow.plantuml giving an overview without the details
''''''''''''''''''
skinparam titleBackgroundColor Blue-White
skinparam titleBorderThickness 1

title
Overview of
the authorization flow
for clients using RAS
to access
dbGaP resources on the
dbGaP FHIR API
end title

note left of RASAuthorize
This is a simplified version
that is clearer on what is happening
but omits important details
end note

[*] --> RASAuthorize: User clicks login button on the client app
RASAuthorize --> ClientHasPassport: User authorizes client app to access dbGaP data using RAS
ClientHasPassport --> AccessService: User tries to interact with controlled-access data
AccessService --> APIHasPassport: App gives passport to FHIR API in header
APIHasPassport --> RetrievePermissions: FHIR API gives passport to clearinghouse
RetrievePermissions --> RunQuery: Clearinghouse returns validated permissions.
RunQuery --> AppWithData: FHIR API returns the data filtered to match the authorization\n encoded in the passport
AppWithData --> [*]: The client app uses the data to fulfill the user's request

note left of ClientHasPassport
If an app has a security hole
then a malicious app could
potentially call it and cause
it to leak the passport.
This is a fundamental flaw
in all BEARER security contexts.
end note

note left of AccessService
Initially this will not
work for users who have
permission to see a large
number of consent
groups because the passport
will be too big to fit in
the header. However,
GA4GH Passport v1.2 is
supposed to have a smaller
"indirect" passport and
RAS may implement it even
sooner.
end note
@enduml
